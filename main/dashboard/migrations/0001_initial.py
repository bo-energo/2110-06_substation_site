# Generated by Django 4.0.4 on 2022-06-01 09:23

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Assets',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('guid', models.CharField(blank=True, max_length=150, null=True, verbose_name='GUID')),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Оборудования',
                'verbose_name_plural': 'Оборудование',
                'db_table': 'assets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AssetStatus',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'Статус объекта',
                'verbose_name_plural': 'Статус объектов',
                'db_table': 'asset_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AssetType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Тип оборудования',
                'verbose_name_plural': 'Тип оборудований',
                'db_table': 'asset_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CalcResultsGis',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('p_diff', models.FloatField(blank=True, null=True)),
                ('breaker_mechanical_wear', models.FloatField(blank=True, null=True)),
                ('breaker_electrical_wear', models.FloatField(blank=True, null=True)),
                ('booster_pump_rul', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Результат диагностики по Gis',
                'verbose_name_plural': 'Результат диагностики по Gis',
                'db_table': 'calc_results_gis',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CalcResultsGisDiag',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(blank=True, max_length=1000, null=True)),
                ('value', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'verbose_name': 'Диагностическое заключение',
                'verbose_name_plural': 'Результат диагностики по Gis (диагн. заключения)',
                'db_table': 'calc_results_gis_diag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CalcResultsGisSpec',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(blank=True, max_length=1000, null=True)),
                ('value', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Специальный параметр',
                'verbose_name_plural': 'Результат диагностики по Gis (спец параметры)',
                'db_table': 'calc_results_gis_spec',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CalcResultsTransf',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('coeff_load', models.FloatField(blank=True, null=True)),
                ('t_hst_ttr', models.FloatField(blank=True, null=True)),
                ('rs', models.FloatField(blank=True, null=True)),
                ('wcp', models.FloatField(blank=True, null=True)),
                ('ltc_mechanical_wear', models.FloatField(blank=True, null=True)),
                ('ltc_electrical_wear', models.FloatField(blank=True, null=True)),
                ('t_ltc_diff', models.FloatField(blank=True, null=True)),
                ('s_loss_noload', models.CharField(blank=True, max_length=1000, null=True)),
                ('s_loss_shortcircuit', models.CharField(blank=True, max_length=1000, null=True)),
                ('k_overload_coeff_alarm', models.CharField(blank=True, max_length=1000, null=True)),
                ('k_overload_coeff_long', models.CharField(blank=True, max_length=1000, null=True)),
                ('duration_coeff_long', models.CharField(blank=True, max_length=1000, null=True)),
                ('duration_overload', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'verbose_name': 'Результат диагностики по трансформаторам',
                'verbose_name_plural': 'Результат диагностики по трансформаторам',
                'db_table': 'calc_results_transf',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CalcResultsTransfDiag',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(blank=True, max_length=1000, null=True)),
                ('value', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'verbose_name': 'Диагностическое заключение',
                'verbose_name_plural': 'Результат диагностики по трансфторматорам (диагн. заключения)',
                'db_table': 'calc_results_transf_diag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CalcResultsTransfSpec',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(blank=True, max_length=1000, null=True)),
                ('value', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Специальный параметр',
                'verbose_name_plural': 'Результат диагностики по трансфторам (спец параметры)',
                'db_table': 'calc_results_transf_spec',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Constants',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(blank=True, null=True, verbose_name='Значение')),
            ],
            options={
                'verbose_name': 'Константа',
                'verbose_name_plural': 'Константы',
                'db_table': 'constants',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inspections',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='Дата')),
            ],
            options={
                'verbose_name': 'Замер',
                'verbose_name_plural': 'Замеры',
                'db_table': 'inspections',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Levels',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='Id')),
                ('name', models.CharField(max_length=150, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Уровень критичности',
                'verbose_name_plural': 'Уровни критичности',
                'db_table': 'levels',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurmentsBush',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('c1_a', models.FloatField(blank=True, null=True)),
                ('c1_b', models.FloatField(blank=True, null=True)),
                ('c1_c', models.FloatField(blank=True, null=True)),
                ('d_c1_a', models.FloatField(blank=True, null=True)),
                ('d_c1_b', models.FloatField(blank=True, null=True)),
                ('d_c1_c', models.FloatField(blank=True, null=True)),
                ('tgd_a', models.FloatField(blank=True, null=True)),
                ('tgd_b', models.FloatField(blank=True, null=True)),
                ('tgd_c', models.FloatField(blank=True, null=True)),
                ('d_tgd_a', models.FloatField(blank=True, null=True)),
                ('d_tgd_b', models.FloatField(blank=True, null=True)),
                ('d_tgd_c', models.FloatField(blank=True, null=True)),
                ('t_a', models.FloatField(blank=True, null=True)),
                ('t_b', models.FloatField(blank=True, null=True)),
                ('t_c', models.FloatField(blank=True, null=True)),
                ('pd_bush_level', models.FloatField(blank=True, null=True)),
                ('pd_bush_intensity', models.FloatField(blank=True, null=True)),
                ('bush_i_creepage', models.FloatField(blank=True, null=True)),
                ('bush_pres', models.FloatField(blank=True, null=True)),
                ('bush_overvoltage_duration', models.FloatField(blank=True, null=True)),
                ('bush_overvoltage_amplitude', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'measurments_bush',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurmentsBushO',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('order', models.IntegerField(blank=True, null=True)),
                ('measure', models.IntegerField(blank=True, null=True)),
                ('value', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'measurments_bush_o',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurmentsC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('c_h2', models.FloatField(blank=True, null=True)),
                ('c_co', models.FloatField(blank=True, null=True)),
                ('c_co2', models.FloatField(blank=True, null=True)),
                ('c_c2h2', models.FloatField(blank=True, null=True)),
                ('c_c2h4', models.FloatField(blank=True, null=True)),
                ('c_c2h6', models.FloatField(blank=True, null=True)),
                ('c_ch4', models.FloatField(blank=True, null=True)),
                ('c_h2_roc_7', models.FloatField(blank=True, null=True)),
                ('c_co_roc_7', models.FloatField(blank=True, null=True)),
                ('c_co2_roc_7', models.FloatField(blank=True, null=True)),
                ('c_c2h2_roc_7', models.FloatField(blank=True, null=True)),
                ('c_c2h4_roc_7', models.FloatField(blank=True, null=True)),
                ('c_c2h6_roc_7', models.FloatField(blank=True, null=True)),
                ('c_ch4_roc_7', models.FloatField(blank=True, null=True)),
                ('c_h2_roc_30', models.FloatField(blank=True, null=True)),
                ('c_co_roc_30', models.FloatField(blank=True, null=True)),
                ('c_co2_roc_30', models.FloatField(blank=True, null=True)),
                ('c_c2h2_roc_30', models.FloatField(blank=True, null=True)),
                ('c_c2h4_roc_30', models.FloatField(blank=True, null=True)),
                ('c_c2h6_roc_30', models.FloatField(blank=True, null=True)),
                ('c_ch4_roc_30', models.FloatField(blank=True, null=True)),
                ('c_tg', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Замер',
                'verbose_name_plural': 'Замеры концентраций',
                'db_table': 'measurments_c',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurmentsCooling',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('order', models.IntegerField(blank=True, null=True)),
                ('cooling_t_in', models.FloatField(blank=True, null=True)),
                ('cooling_t_out', models.FloatField(blank=True, null=True)),
                ('cooling_pump_on', models.FloatField(blank=True, null=True)),
                ('cooling_fan_on', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'measurments_cooling',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurmentsD',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('order', models.IntegerField(blank=True, null=True)),
                ('pd_level', models.FloatField(blank=True, null=True)),
                ('pd_intensity', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'measurments_d',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurmentsI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('u_hv_a', models.FloatField(blank=True, null=True)),
                ('u_hv_b', models.FloatField(blank=True, null=True)),
                ('u_hv_c', models.FloatField(blank=True, null=True)),
                ('u_mv_a', models.FloatField(blank=True, null=True)),
                ('u_mv_b', models.FloatField(blank=True, null=True)),
                ('u_mv_c', models.FloatField(blank=True, null=True)),
                ('u_lv_a', models.FloatField(blank=True, null=True)),
                ('u_lv_b', models.FloatField(blank=True, null=True)),
                ('u_lv_c', models.FloatField(blank=True, null=True)),
                ('u_lin_hv_a', models.FloatField(blank=True, null=True)),
                ('u_lin_hv_b', models.FloatField(blank=True, null=True)),
                ('u_lin_hv_c', models.FloatField(blank=True, null=True)),
                ('u_lin_mv_a', models.FloatField(blank=True, null=True)),
                ('u_lin_mv_b', models.FloatField(blank=True, null=True)),
                ('u_lin_mv_c', models.FloatField(blank=True, null=True)),
                ('u_lin_lv_a', models.FloatField(blank=True, null=True)),
                ('u_lin_lv_b', models.FloatField(blank=True, null=True)),
                ('u_lin_lv_c', models.FloatField(blank=True, null=True)),
                ('i_hv_a', models.FloatField(blank=True, null=True)),
                ('i_hv_b', models.FloatField(blank=True, null=True)),
                ('i_hv_c', models.FloatField(blank=True, null=True)),
                ('i_mv_a', models.FloatField(blank=True, null=True)),
                ('i_mv_b', models.FloatField(blank=True, null=True)),
                ('i_mv_c', models.FloatField(blank=True, null=True)),
                ('i_pa_hv', models.FloatField(blank=True, null=True)),
                ('i_pb_hv', models.FloatField(blank=True, null=True)),
                ('i_pc_hv', models.FloatField(blank=True, null=True)),
                ('p_hv', models.FloatField(blank=True, null=True)),
                ('p_mv', models.FloatField(blank=True, null=True)),
                ('p_lv', models.FloatField(blank=True, null=True)),
                ('q_hv', models.FloatField(blank=True, null=True)),
                ('q_mv', models.FloatField(blank=True, null=True)),
                ('q_lv', models.FloatField(blank=True, null=True)),
                ('s_hv', models.FloatField(blank=True, null=True)),
                ('s_mv', models.FloatField(blank=True, null=True)),
                ('s_lv', models.FloatField(blank=True, null=True)),
                ('s_loss_noload', models.FloatField(blank=True, null=True)),
                ('s_loss_shortcircuit', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Замер',
                'verbose_name_plural': 'Замеры рабочих параметров',
                'db_table': 'measurments_i',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurmentsLtc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('ltc_pos', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'measurments_ltc',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurmentsMoisture',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('rs', models.FloatField(blank=True, null=True)),
                ('wcl', models.FloatField(blank=True, null=True)),
                ('wcl_roc_day', models.FloatField(blank=True, null=True)),
                ('wcl_roc_month', models.FloatField(blank=True, null=True)),
                ('wcl_tp', models.FloatField(blank=True, null=True)),
                ('wcp', models.FloatField(blank=True, null=True)),
                ('wcp_roc_dayf', models.FloatField(blank=True, null=True)),
                ('wcp_roc_month', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'measurments_moisture',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurmentsO',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(blank=True, max_length=250, null=True)),
                ('overvoltage_duration', models.IntegerField(blank=True, null=True)),
                ('overvoltage_ratio', models.FloatField(blank=True, null=True)),
                ('overvoltage_counter_01', models.BooleanField(blank=True, null=True)),
                ('overvoltage_counter_02', models.BooleanField(blank=True, null=True)),
                ('overvoltage_counter_03', models.BooleanField(blank=True, null=True)),
                ('overvoltage_counter_04', models.BooleanField(blank=True, null=True)),
                ('overvoltage_counter_05', models.BooleanField(blank=True, null=True)),
                ('overvoltage_counter_06', models.BooleanField(blank=True, null=True)),
                ('overvoltage_counter_07', models.BooleanField(blank=True, null=True)),
                ('overvoltage_counter_08', models.BooleanField(blank=True, null=True)),
                ('overvoltage_counter_09', models.BooleanField(blank=True, null=True)),
                ('overvoltage_counter_flag', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'measurments_o',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurmentsOil',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('rs', models.FloatField(blank=True, null=True)),
                ('data_oil_drying', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'measurments_oil',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurmentsPattern',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('phaze', models.IntegerField(blank=True, null=True)),
                ('amplitude', models.IntegerField(blank=True, null=True)),
                ('frequency', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'measurments_pattern',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurmentsT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('t_bl', models.FloatField(blank=True, null=True)),
                ('t_bl_gap', models.FloatField(blank=True, null=True)),
                ('t_bt', models.FloatField(blank=True, null=True)),
                ('t_bt_off', models.FloatField(blank=True, null=True)),
                ('t_en', models.FloatField(blank=True, null=True)),
                ('t_hst', models.FloatField(blank=True, null=True)),
                ('t_hst_ttr', models.FloatField(blank=True, null=True)),
                ('t_ltc', models.FloatField(blank=True, null=True)),
                ('t_ltc_diff', models.FloatField(blank=True, null=True)),
                ('t_tp', models.FloatField(blank=True, null=True)),
                ('t_tp_calc', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Замер',
                'verbose_name_plural': 'Замеры температур',
                'db_table': 'measurments_t',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Params',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Наименование')),
                ('description', models.CharField(blank=True, max_length=450, null=True, verbose_name='Комментарий')),
            ],
            options={
                'verbose_name': 'Параметр',
                'verbose_name_plural': 'Параметры',
                'db_table': 'params',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pdata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset_id', models.IntegerField(verbose_name='Объект')),
                ('value', models.FloatField(blank=True, null=True, verbose_name='Значение')),
            ],
            options={
                'verbose_name': 'Параметр',
                'verbose_name_plural': 'Паспортные данные',
                'db_table': 'pdata',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PdataNorms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Перечисления значений паспортных данных',
                'verbose_name_plural': 'Перечисления значений паспортных данных',
                'db_table': 'pdata_norms',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PdataSpec',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(verbose_name='Order')),
                ('value', models.FloatField(blank=True, null=True, verbose_name='Значение')),
            ],
            options={
                'db_table': 'pdata_spec',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Properties',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('property', models.CharField(max_length=150)),
                ('name', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'properties',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Types',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Типы данных',
                'verbose_name_plural': 'Тип данных',
                'db_table': 'types',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Units',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'units',
                'managed': False,
            },
        ),
    ]
